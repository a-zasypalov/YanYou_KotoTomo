import kotlin.String;
import kotlin.collections.List;

-- Table for storing languages
CREATE TABLE LanguagesPersisted (
    id TEXT PRIMARY KEY NOT NULL
);

-- Table for storing source languages for each learning language
CREATE TABLE SourceLanguagesPersisted (
    id TEXT NOT NULL, -- Foreign key for Languages table
    source_language TEXT NOT NULL,
    PRIMARY KEY (id, source_language),
    FOREIGN KEY (id) REFERENCES LanguagesPersisted(id) ON DELETE CASCADE
);

-- Table for storing courses
CREATE TABLE CoursesPersisted (
    id TEXT PRIMARY KEY NOT NULL,
    source_language_id TEXT NOT NULL,
    language_id TEXT NOT NULL,
    course_name TEXT NOT NULL,
    required_decks TEXT AS List<String>, -- JSON array of required deck IDs
    FOREIGN KEY (source_language_id) REFERENCES SourceLanguagesPersisted(source_language) ON DELETE CASCADE,
    FOREIGN KEY (language_id) REFERENCES SourceLanguagesPersisted(id) ON DELETE CASCADE
);

-- Table for storing decks (normal or alphabet)
CREATE TABLE CourseDecksPersisted (
    id TEXT PRIMARY KEY NOT NULL,
    course_id TEXT NOT NULL,
    name TEXT NOT NULL,
    version INTEGER NOT NULL,
    type TEXT NOT NULL, -- "normal" or "alphabet"
    alphabet TEXT, -- Nullable, specific to "alphabet" type
    FOREIGN KEY (course_id) REFERENCES CoursesPersisted(id) ON DELETE CASCADE
);

insertLanguage:
INSERT OR REPLACE INTO LanguagesPersisted (id) VALUES (?);

insertSourceLanguage:
INSERT OR REPLACE INTO SourceLanguagesPersisted (id, source_language) VALUES (?, ?);

insertCourse:
INSERT OR REPLACE INTO CoursesPersisted (id, source_language_id, language_id, course_name, required_decks)
VALUES (?, ?, ?, ?, ?);

insertCourseDeck:
INSERT OR REPLACE INTO CourseDecksPersisted (id, course_id, name, version, type, alphabet)
VALUES (?, ?, ?, ?, ?, ?);

getRootData:
SELECT
    lp.id AS language_id,
    slp.source_language AS source_language,
    cp.id AS course_id,
    cp.course_name AS course_name,
    cp.required_decks AS required_decks,
    cdp.id AS deck_id,
    cdp.name AS deck_name,
    cdp.type AS deck_type,
    cdp.alphabet AS alphabet,
    cdp.version AS version
FROM LanguagesPersisted lp
LEFT JOIN SourceLanguagesPersisted slp ON lp.id = slp.id
LEFT JOIN CoursesPersisted cp ON slp.source_language = cp.source_language_id
LEFT JOIN CourseDecksPersisted cdp ON cp.id = cdp.course_id
WHERE slp.id = cp.language_id;

getCourse:
SELECT
    CoursesPersisted.id AS course_id,
    CoursesPersisted.course_name,
    CoursesPersisted.required_decks,
    CourseDecksPersisted.id AS deck_id,
    CourseDecksPersisted.name AS deck_name,
    CourseDecksPersisted.version AS deck_version,
    CourseDecksPersisted.type AS deck_type,
    CourseDecksPersisted.alphabet AS deck_alphabet
FROM CoursesPersisted
LEFT JOIN CourseDecksPersisted ON CoursesPersisted.id = CourseDecksPersisted.course_id
WHERE CoursesPersisted.id = :courseId;

clearCache:
DELETE FROM LanguagesPersisted;
DELETE FROM SourceLanguagesPersisted;
DELETE FROM CoursesPersisted;
DELETE FROM CourseDecksPersisted;